<?xml version="1.0" encoding="UTF-8"?>
<project name="general.bundle.builder" basedir=".">

	<import file="./build_type.xml" />

	<!-- == [init][common] : Define general properties   -->
	<target name="init">
		<echo>init</echo>
		<property name="basedir" value="." />
		<property name="resourcesdir" value="${basedir}" />
		<property name="temp.folder" value="${basedir}/@dot" />
	</target>

	<!-- == [copy-resources][common] :  -->
	<target name="copy-resources" depends="init" description="Release this bundle">
		<echo>${file.includes}
		</echo>
		<copy todir="${temp.folder}" failonerror="true" overwrite="true">
			<!-- <fileset dir="${basedir}" id="bundle.resources" includes="${file.includes}" /> -->
			<filelist files="${file.includes}" dir="${basedir}" />
		</copy>
	</target>


	<!-- == [update][release] : Build bundle needs : # ${destination} jar destination # ${release.file} release name will be echoed to this file # ${release.task} release task name == -->
	<target name="update" depends="init" description="Build the plug-in">
		<cvs dest="." command="ci -m '${release.task}' ." failonerror="true" />
		<cvs dest="." command="update ." failonerror="true" />
	</target>

	<!-- == [commit][release] : Build bundle needs : # ${destination} jar destination # ${release.file} release name will be echoed to this file # ${release.task} release task name == -->
	<target name="commit" depends="init" description="Build the plug-in">
		<cvs dest="." command="add dep" />
		<!--
		<cvs dest="." command="add dep/release" />
		<cvs dest="." command="add 'dep/release/${releaseName}.jar'" />
-->
		<cvs dest="." command="ci -m '${release.task}' ." failonerror="true" />
		<cvs dest="." command="tag ${release.tag} ." failonerror="true" />
	</target>

	<!-- == [build-only][release] : Build bundle needs : # ${destination} jar destination # ${release.file} release name will be echoed to this file # ${release.task} release task name == -->
	<target name="build-only" depends="init" description="Build the plug-in">
		<mkdir dir="${destination}" />
		<!--
		<mkdir dir="${basedir}/dep" />
		<mkdir dir="${basedir}/dep/release" />
		<mkdir dir="${basedir}/dep/debug" />
-->
		<version.changer manifest="${basedir}/META-INF/MANIFEST.MF" />
		<fail unless="version">Version changer is not working. Please find the master.</fail>
		<fail unless="release.tag">Version changer is not working. Please find the master.</fail>
		<delete dir="${temp.folder}" failonerror="false" />
		<mkdir dir="${temp.folder}" />
		<antcall target="compile">
			<param name="javacFailOnError" value="true" />
			<param name="javacDebugInfo" value="off" />
			<param name="javacDebug" value="" />
			<param name="javacVerbose" value="false" />
			<param name="compilerArg" value="" />
			<param name="javacSource" value="1.6" />
			<param name="javacTarget" value="1.6" />
		</antcall>
		<antcall target="copy-resources" />
		<property name="releaseName" value="${jar.name}_${version}" userproperty="true" />
		<jar destfile="${destination}/${releaseName}.jar" basedir="${temp.folder}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" failonerror="false" />
		<!--
		<copy todir="${destination}">
			<fileset file="${basedir}/dep/release/${releaseName}.jar" />
		</copy>
-->
		<echo file="${release.file}" append="true">${releaseName} 
		</echo>
	</target>

	<!-- == [build-only-debug][debug] : Build bundle needs : # ${destination} jar destination  == -->
	<target name="build-only-debug" depends="init" description="Build the plug-in">
		<mkdir dir="${destination}" />
		<!--
		<mkdir dir="${basedir}/dep" />
		<mkdir dir="${basedir}/dep/release" />
		<mkdir dir="${basedir}/dep/debug" />
-->
		<delete dir="${temp.folder}" failonerror="false" />
		<mkdir dir="${temp.folder}" />
		<antcall target="compile">
			<param name="javacFailOnError" value="true" />
			<param name="javacDebugInfo" value="on" />
			<param name="javacDebug" value="lines,source,vars" />
			<param name="javacVerbose" value="false" />
			<param name="compilerArg" value="" />
			<param name="javacSource" value="1.6" />
			<param name="javacTarget" value="1.6" />
		</antcall>
		<antcall target="copy-resources" />
		<version.info manifest="${basedir}/META-INF/MANIFEST.MF" />
		<fail unless="version">Version changer is not working. Please find the master.</fail>
		<property name="releaseName" value="${jar.name}_${version}" />
		<jar destfile="${destination}/${releaseName}.jar" basedir="${temp.folder}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" failonerror="false" />
		<!--
		<copy todir="${destination}">
			<fileset file="${basedir}/dep/debug/${releaseName}.jar" />
		</copy>
-->
	</target>

	<!-- == [build][release] : Build bundle needs : # ${destination} jar destination # ${release.file} release name will be echoed to this file # ${release.task} release task name == -->
	<target name="build" depends="init" description="Build the plug-in">
		<mkdir dir="${destination}" />
		<!--
		<mkdir dir="${basedir}/dep" />
		<mkdir dir="${basedir}/dep/release" />
		<mkdir dir="${basedir}/dep/debug" />
-->
		<cvs dest="." command="ci -m '${release.task}' ." failonerror="true" />
		<cvs dest="." command="update ." failonerror="true" />
		<version.changer manifest="${basedir}/META-INF/MANIFEST.MF" />
		<fail unless="version">Version changer is not working. Please find the master.</fail>
		<fail unless="release.tag">Version changer is not working. Please find the master.</fail>
		<delete dir="${temp.folder}" failonerror="false" />
		<mkdir dir="${temp.folder}" />
		<antcall target="compile">
			<param name="javacFailOnError" value="true" />
			<param name="javacDebugInfo" value="off" />
			<param name="javacDebug" value="" />
			<param name="javacVerbose" value="false" />
			<param name="compilerArg" value="" />
			<param name="javacSource" value="1.6" />
			<param name="javacTarget" value="1.6" />
		</antcall>
		<antcall target="copy-resources" />
		<property name="releaseName" value="${jar.name}_${version}" />
		<jar destfile="${destination}/${releaseName}.jar" basedir="${temp.folder}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" failonerror="false" />
		<!--
		<copy todir="${destination}">
			<fileset file="${basedir}/dep/release/${releaseName}.jar" />
		</copy>
-->
		<echo file="${release.file}" append="true">${releaseName} 
		</echo>
		<!--
		<cvs dest="." command="add dep" />

		<cvs dest="." command="add dep/release" />

		<cvs dest="." command="add 'dep/release/${releaseName}.jar'" />
-->
		<cvs dest="." command="ci -m '${release.task}' ." failonerror="true" />
		<cvs dest="." command="tag ${release.tag} ." failonerror="true" />
	</target>

	<!-- == [build][debug] : Build bundle needs : # ${destination} jar destination  == -->
	<target name="build_debug" depends="init" description="Build the plug-in">
		<mkdir dir="${destination}" />
		<!-- mkdir dir="${basedir}/dep" />
		<mkdir dir="${basedir}/dep/release" />
		<mkdir dir="${basedir}/dep/debug" /-->
		<delete dir="${temp.folder}" failonerror="false" />
		<mkdir dir="${temp.folder}" />
		<antcall target="compile">
			<param name="javacFailOnError" value="true" />
			<param name="javacDebugInfo" value="on" />
			<param name="javacDebug" value="lines,source,vars" />
			<param name="javacVerbose" value="false" />
			<param name="compilerArg" value="" />
			<param name="javacSource" value="1.6" />
			<param name="javacTarget" value="1.6" />
		</antcall>
		<antcall target="copy-resources" />
		<version.info manifest="${basedir}/META-INF/MANIFEST.MF" />
		<fail unless="version">Version changer is not working. Please find the master.</fail>
		<property name="releaseName" value="${jar.name}_${version}" />
		<jar destfile="${destination}/${releaseName}.jar" basedir="${temp.folder}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" failonerror="false" />
		<!--copy todir="${destination}">
			<fileset file="${basedir}/dep/debug/${releaseName}.jar" />
		</copy-->
	</target>

	<target name="compile" description="Compile and Create jar.">
		<!-- compile the source code -->
		<javac destdir="${temp.folder}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" debuglevel="${javacDebug}" includeAntRuntime="no" compiler="modern" source="${javacSource}" target="${javacTarget}" classpath="${bundle.classpath}">
			<!-- <classpath refid="plugin.classpath" /> -->
			<src path="src/" />
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java" />
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
	</target>

</project>
