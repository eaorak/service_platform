package com.adenon.sp.persistence.jpa;

import java.util.EnumMap;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import com.adenon.sp.kernel.osgi.Services;
import com.adenon.sp.persistence.IJpaProvider;
import com.adenon.sp.persistence.PersistenceService;
import com.adenon.sp.persistence.SystemPool;


public class JpaProviderService implements IJpaProvider {

    private final EnumMap<SystemPool, EmHolder> emap = new EnumMap<SystemPool, EmHolder>(SystemPool.class);

    public JpaProviderService(Services services,
                              PersistenceService persistence) {
        for (SystemPool pool : SystemPool.values()) {
            Map<String, Object> props = JpaProps.getPropsFor(persistence.getSystemPool(pool).getConfig());
            EntityManagerFactory emf = Persistence.createEntityManagerFactory(pool.key(), props);
            this.emap.put(pool, new EmHolder(emf, emf.createEntityManager(props)));
        }
        // this.test();
    }

    @SuppressWarnings("unused")
    private void test() {
        EntityManager manager = this.emap.get(SystemPool.SYSTEM).manager();
        manager.getTransaction().begin();
        Person bob = new Person();
        bob.setName("Bob");
        manager.persist(bob);
        manager.getTransaction().commit();
    }

    @Override
    public EntityManager entityManager(SystemPool pool) {
        return this.emap.get(pool).manager();
    }

    public void close() {
        // TODO close all em holders
    }


}
