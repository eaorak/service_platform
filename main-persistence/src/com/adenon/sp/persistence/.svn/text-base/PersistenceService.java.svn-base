package com.adenon.sp.persistence;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.adenon.sp.administration.IAdministrationService;
import com.adenon.sp.kernel.osgi.Services;
import com.adenon.sp.kernel.properties.SysProps;
import com.adenon.sp.kernel.utils.Properties;
import com.adenon.sp.persistence.pool.DbPool;
import com.adenon.sp.persistence.pool.DbPoolConfig;


public class PersistenceService implements IPersistenceService {

    private final Map<String, DbPool> pools = new ConcurrentHashMap<String, DbPool>();
    private final Services            services;
    private final Properties          dbProps;

    public PersistenceService(Services services,
                              String confPath) throws Exception {
        this.services = services;
        IAdministrationService service = services.getService(IAdministrationService.class);
        this.dbProps = this.loadConfiguration(confPath);
        service.registerBean(new PersistenceBean(this));
        this.initSystemPools();
    }

    private Properties loadConfiguration(String confPath) throws IOException {
        String filePath = confPath + SysProps.PATH_SEP.value() + PersistenceConstants.CONFIG_FILE_NAME;
        return Properties.load(filePath, SystemPool.values(), DbConfig.values());
    }

    private void initSystemPools() throws Exception {
        for (SystemPool pool : SystemPool.values()) {
            DbPool sysPool = DbPool.createSystemPool(pool, this.dbProps, this.services);
            this.registerPool(sysPool);
        }
    }

    @Override
    public DbPool getSystemPool(SystemPool pool) {
        return this.pools.get(pool.key());
    }

    @Override
    public IDbPool createPool(IPoolConfig config) throws Exception {
        if (this.pools.get(config.getName()) != null) {
            throw new Exception("Pool with name [" + config.getName() + "] already exist !");
        }
        DbPool pool = DbPool.createPool((DbPoolConfig) config, this.services);
        this.registerPool(pool);
        return pool;
    }

    private void registerPool(DbPool pool) {
        this.pools.put(pool.getConfig().getName(), pool);
    }

    @Override
    public IPoolConfig newConfig(String name,
                                 String url) {
        return new DbPoolConfig(name, url);
    }

    @Override
    public IDbPool getPool(String name) {
        return this.pools.get(name);
    }

    public boolean deletePool(String poolName) {
        if (SystemPool.isSystemPool(poolName)) {
            throw new RuntimeException("System pools can not be deleted !");
        }
        DbPool dbPool = this.pools.get(poolName);
        if (dbPool != null) {
            dbPool.close();
            return true;
        }
        return false;
    }

}
